# Node.js Metadata Parser API

A simple and versatile Node.js API for extracting metadata, sitemap links, and bypassing CORS restrictions using a proxy. This project is designed to be lightweight, efficient, and developer-friendly, with built-in preview capabilities for better usability.

---

## Features

### 1. Metadata Parsing

- **Route:** `/metadata`
- **Description:** Extracts metadata from a given URL (e.g., title, description, images).
- **Preview:** Supports a `preview=true` query parameter to render the metadata visually.

#### Example:

- **Request:**
  ```
  GET /metadata?url=https://example.com&preview=true
  ```
- **Response (JSON):**
  ```json
  {
    "title": "Example Domain",
    "description": "This domain is for use in illustrative examples.",
    "image": "https://example.com/logo.png"
  }
  ```
- **Response (Preview):** Returns an HTML page with the metadata visually displayed.

---

### 2. Sitemap Link Extraction

- **Route:** `/sitemap`
- **Description:** Fetches all anchor links (`<a>` tags) from a given URL.
- **Preview:** Supports a `preview=true` query parameter to display links in an HTML format.

#### Example:

- **Request:**
  ```
  GET /sitemap?url=https://example.com&preview=true
  ```
- **Response (JSON):**
  ```json
  {
    "links": ["https://example.com/about", "https://example.com/contact"]
  }
  ```
- **Response (Preview):** Returns an HTML page listing all extracted links.

---

### 3. Proxy Request

- **Route:** `/proxy`
- **Description:** Resolves CORS-related issues by acting as a proxy to fetch data from a specified URL.

#### Example:

- **Request:**
  ```
  GET /proxy?url=https://example.com
  ```
- **Response:** Returns the raw content of the requested URL.

---

## Usage

Access the API at `https://proxy-cyan-iota.vercel.app` and use the provided routes with appropriate query parameters.

---

## Contributing

Feel free to submit issues or pull requests to improve this project. Contributions are always welcome!
